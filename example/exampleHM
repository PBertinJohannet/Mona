sig flip = forall a b c . (a -> b -> c) -> b -> a -> c;
let flip = \f a b -> (f b) a;

sig add = Int -> Int -> Int
let add a b = a + b;

data Unit = Unit;
data Bool = True | False;

class Read a = {
  sig read = (List Char) -> a;
};
class Functor f = {
  sig fmap = forall a b . (a -> b) -> (f a) -> f b;
}
class Monad m = {
  sig return = forall a . m a;
  sig bind = forall a b . (a -> m b) -> (m a) -> (m b);
}
class Print s = {
  sig print = s -> List (IO Unit);
}

data Maybe a = Nothing | Just a;

inst Int of Read = {
  let read k = 1;
}

data ListF f a = EndF | ConsF a (f a);
data List a  = List ((fix ListF) a);
let Cons = (\a b -> List(ConsF a b));
sig End = forall a . List a;
let End = List(EndF);

inst List of Functor = {
  let fmap f = \(List l) -> case l of
    (EndF) -> End,
    (ConsF a b) -> Cons (f a) (fmap f b);
}

class NeedMul a = {
  sig func = forall b . Functor b => (b a) -> (b a);
}

inst Int of NeedMul = {
  let func x = x;
}

let difmap f a = fmap (fmap f) a;

let choseFrom a b c = b;

let ot = func [1];

sig printAllLn = (List Int) -> List (IO Unit);
let printAllLn = fmap printInt;

sig fac = Int -> Int;
let fac a = if (a == 0) then  1 else a * (fac (a - 1));

sig choose = forall a . Bool -> Int -> Int -> Int
let choose c a b = case c of
  (False) -> a,
  (True) -> (2 + b);

sig sum = (List Int) -> Int
let sum = \(List l) -> case l of
  (EndF) -> 0,
  (ConsF a b) -> a + (sum b);

sig range = Int -> (List Int);
let range a = case (a == 0) of
  (True) -> [0],
  (False) -> Cons a (range (a - 1));

inst Maybe of Functor = {
  let fmap f v = case v of
    (Just j) -> Just (f j),
    (Nothing) -> Nothing;
}

inst Maybe Int of Print = {
  let print v = case v of
    (Just j) -> print j,
    (Nothing) -> [];
}

inst Int of Print = {
  let print i = [printInt i];
}

inst List of Print = {
  let print = fmap printInt;
}

sig append = forall a . a -> (List a) -> (List a);
let append elem = \(List l) -> case l of
  (EndF) -> [elem],
  (ConsF a b) -> Cons a (append elem b);

sig println = forall a . Print a => a -> List (IO Unit);
let println a = append (printChar endl) (print a);

let main = print [(sum (fmap fac (range 5)))];
