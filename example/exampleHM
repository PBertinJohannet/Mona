data Maybe a = Nil | Just a;
let inL a = [a];
let ot = \(Just a) -> a;
let out = \(Just a) -> inL a;
data Nat = Nat (fix Maybe);
let fromNat f = \(Nat (Just a)) -> 1 + (f a);
let toInt = fix fromNat;
let fromInt f a = if a == 0 then Nat Nil else Nat (Just (f (a-1)));
let toNat = fix fromInt;
let idInt a = toInt (toNat a);
data ListF f a = EndF | ConsF a (f a);
data List a = List ((fix ListF) a);
