
data List a =
  | Nil = List a;
  | Cons = a -> List a -> List a;

sig flip = forall a b c . (a -> b -> c) -> b -> a -> c;
let flip = \f a b -> (f b) a;

data Fix f = | Fix = f (Fix f) -> Fix f;

sig unfix = forall f . (Fix f) -> f (Fix f);
let unfix = \(Fix a) -> a;

data Unit = | Unit = Unit;
data Bool =
  | True = Bool;
  | False = Bool;

class Functor f = {
  sig fmap = forall a b . (a -> b) -> (f a) -> f b;
}

class Print s = {
  sig print = s -> List (IO Unit);
}

inst List of Functor = {
  let fmap f l = case l of
    (Nil) -> Nil,
    (Cons a b) -> Cons (f a) (fmap f b);
}

inst List Int of Print = {
  let print = fmap printInt;
}

data Maybe a =
  | Just = a -> Maybe a
  | Nothing = Maybe a;
data Nat = | Nat = Fix Maybe -> Nat;
let S = \(Nat i) -> Nat (Fix (Just i));
let Z = Nat (Fix (Nothing));

inst Maybe of Functor = {
  let fmap f v = case v of
    (Just j) -> Just (f j),
    (Nothing) -> Nothing;
}

sig cata = forall a f . Functor f => ((f a) -> a) -> (Fix f) -> a
let cata alg a = alg ((fmap (cata alg)) (unfix a));

sig toInt = Nat -> Int;
let toInt = \(Nat i) -> cata (\a -> case a of
  (Just k) -> k + 1,
  (Nothing) -> 0 ) i;

let four = S (S (S (S Z)));

let main = printInt (toInt four);
