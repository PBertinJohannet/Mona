data MyList x =
  | Cons = a -> (MyList a) -> MyList a;
  | Nil = MyList j;
  | Two = a -> MyList a -> MyList a;

data ADT x a =
  | Right = a -> ADT x a;
  | Left = x -> ADT x a;
  | Prod = x -> a -> ADT x a;

data App x a =
  | App = x a -> App x a;

data Term x =
  | K = Term (a -> b -> a);
  | S = (Term ((a -> b -> c))  -> (a -> b) -> a -> c);
  | Const = a -> Term a;
  | Apply = (Term (a -> b)) -> (Term a) -> Term b;

data NonEmpty = | NonEmpty = NonEmpty;
data Empty = | Empty = Empty;

data Fix f = | Fix = f (Fix f) -> Fix f;

data NonEmpty = | NonEmpty = NonEmpty;
data Empty = | Empty = Empty;

data List x y =
  | Nil = List Empty a;
  | Cons = a -> List b a -> List NonEmpty a;

sig safeHead = forall x . (List NonEmpty x) -> x;
let safeHead = \(Cons a b) -> a;

let main = printInt (safeHead (Cons 2 Nil));



---- now :

data List a =
  | Nil = List a;
  | Cons = a -> List a -> List a;

sig flip = forall a b c . (a -> b -> c) -> b -> a -> c;
let flip = \f a b -> (f b) a;

data Fix f = | Fix = f (Fix f) -> Fix f;

sig unfix = forall f . (Fix f) -> f (Fix f);
let unfix = \(Fix a) -> a;

data Unit = | Unit = Unit;
data Bool =
  | True = Bool;
  | False = Bool;

class Functor f = {
  sig fmap = forall a b . (a -> b) -> (f a) -> f b;
}

class Print s = {
  sig print = s -> List (IO Unit);
}

inst List of Functor = {
  let fmap f l = case l of
    (Nil) -> Nil,
    (Cons a b) -> Cons (f a) (fmap f b);
}

inst List Int of Print = {
  let print = fmap printInt;
}

data Maybe a =
  | Just = a -> Maybe a
  | Nothing = Maybe a;
data Nat = | Nat = Fix Maybe -> Nat;
let S = \(Nat i) -> Nat (Fix (Just i));
let Z = Nat (Fix (Nothing));

inst Maybe of Functor = {
  let fmap f v = case v of
    (Just j) -> Just (f j),
    (Nothing) -> Nothing;
}

sig cata = forall a f . Functor f => ((f a) -> a) -> (Fix f) -> a
let cata alg a = alg ((fmap (cata alg)) (unfix a));

sig toInt = Nat -> Int;
let toInt = \(Nat i) -> cata (\a -> case a of
  (Just k) -> k + 1,
  (Nothing) -> 0 ) i;

let four = S (S (S (S Z)));

let main = case (Just 2) of
  (Just a) -> printInt a,
  (Nothing) -> printInt 0;



----------------



data Bool =
  | True = Bool;
  | False = Bool;

data Prod a b = 
  | P = a -> b -> Prod a b;

data D a b = 
  | CI = Int -> Int -> D Int Int;
  | CB = Bool -> Bool -> D Bool Bool;
  | CR = k a b -> c -> D (k a b)c;
  | CA = a -> c -> D a c;
  | CD = D a b -> c -> D (D a b)c;

data C a = 
  | CA = a -> C a;
  | CI = Int -> C Int;
  | CR = k a -> C (k a);
  | CC = C a -> C (C a);
  | CCI = C Int -> C (C Int);

let correct f = \a -> case a of
  (CA (CI a)) -> 1 + a,
  (CA (CA a)) -> 1 + a,
  (CC (CI a)) -> 1 + a,
  (CC (CA a)) -> 1 + a,
  (CR (CI a)) -> 1 + a,
  (CR (CA a)) -> 1 + a,
  (CCI (CI a)) -> 1 + a,
  (CCI (CA a)) -> 1 + a;

let main = printInt 4;